{"version":3,"sources":["Avatar.tsx"],"names":["Avatar","children","props","ref","error","setError","React","useState","_text","source","style","resolvedProps","Badge","remainingChildren","Children","map","child","key","type","displayName","push","imageFitStyle","height","width","getSource","uri","imageSource","borderRadius","length"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;;;AAEA,MAAMA,MAAM,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAY,KAAGC;AAAf,CAAD,EAAuCC,GAAvC,KAAoD;AACjE,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBC,eAAMC,QAAN,CAAe,KAAf,CAA1B;;AACA,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,MAAT;AAAiBC,IAAAA,KAAjB;AAAwB,OAAGC;AAA3B,MAA6C,uCACjD,QADiD,EAEjDT,KAFiD,CAAnD;;AAKA,MAAIU,KAAK,gBAAG,2DAAZ;;AACA,QAAMC,iBAAgC,GAAG,EAAzC,CARiE,CASjE;;AACAP,iBAAMQ,QAAN,CAAeC,GAAf,CAAmBd,QAAnB,EAA6B,CAACe,KAAD,EAAQC,GAAR,KAAgB;AAC3C,QACE,QAAOD,KAAP,aAAOA,KAAP,uBAAOA,KAAK,CAAEE,IAAd,MAAuB,QAAvB,IACA,CAAAF,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEE,IAAP,CAAYC,WAAZ,MAA4B,aAF9B,EAGE;AACAP,MAAAA,KAAK,GAAGI,KAAR;AACD,KALD,MAKO;AACLH,MAAAA,iBAAiB,CAACO,IAAlB,CACE,OAAOJ,KAAP,KAAiB,QAAjB,IAA6B,OAAOA,KAAP,KAAiB,QAA9C,gBACE,6BAAC,gBAAD;AAAM,QAAA,GAAG,EAAE,qBAAqBC;AAAhC,SAAyCT,KAAzC,GACGQ,KADH,CADF,GAKEA,KANJ;AASD;AACF,GAjBD;;AAmBA,QAAMK,aAAkB,GAAG;AAAEC,IAAAA,MAAM,EAAE,MAAV;AAAkBC,IAAAA,KAAK,EAAE;AAAzB,GAA3B,CA7BiE,CA8BjE;;AACA,MAAI,kDAAsBrB,KAAtB,CAAJ,EAAkC;AAChC,WAAO,IAAP;AACD;;AAED,QAAMsB,SAAS,GAAG,MAAM;AACtB,QAAIf,MAAJ,EAAY;AACV,UAAI,sBAAIA,MAAJ,EAAY,KAAZ,KAAsB,CAAC,qBAAMA,MAAM,CAACgB,GAAb,CAA3B,EAA8C;AAC5C,eAAOhB,MAAP;AACD,OAFD,MAEO,IAAI,CAAC,sBAAIA,MAAJ,EAAY,KAAZ,CAAL,EAAyB;AAC9B,eAAOA,MAAP;AACD;AACF;;AACD,WAAO,IAAP;AACD,GATD;;AAUA,QAAMiB,WAAW,GAAGF,SAAS,EAA7B;AAEA,sBACE,6BAAC,eAAD,EAASb,aAAT,EACGe,WAAW,IAAI,CAACtB,KAAhB,gBACC,6BAAC,iBAAD;AACE,IAAA,YAAY,EAAEO,aAAa,CAACgB,YAD9B;AAEE,IAAA,MAAM,EAAElB,MAFV;AAGE,IAAA,GAAG,EAAE,IAHP;AAIE,IAAA,IAAI,EAAED,KAJR;AAKE,IAAA,KAAK,EAAE,CAACE,KAAD,EAAQW,aAAR,CALT;AAME,IAAA,OAAO,EAAE,MAAM;AACbhB,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,KARH;AASE,IAAA,GAAG,EAAEF;AATP,IADD,GAaCU,iBAAiB,CAACe,MAAlB,KAA6B,CAA7B,IAAkCf,iBAdtC,EAgBGD,KAhBH,CADF;AAoBD,CAnED;;4BAqEe,+BAAK,uBAAWZ,MAAX,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Box, Image, Text } from '../../primitives';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { IAvatarProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport isNil from 'lodash.isnil';\nimport has from 'lodash.has';\n\nconst Avatar = ({ children, ...props }: IAvatarProps, ref: any) => {\n  const [error, setError] = React.useState(false);\n  const { _text, source, style, ...resolvedProps } = usePropsResolution(\n    'Avatar',\n    props\n  );\n\n  let Badge = <></>;\n  const remainingChildren: JSX.Element[] = [];\n  //  Pop Badge from children\n  React.Children.map(children, (child, key) => {\n    if (\n      typeof child?.type === 'object' &&\n      child?.type.displayName === 'AvatarBadge'\n    ) {\n      Badge = child;\n    } else {\n      remainingChildren.push(\n        typeof child === 'string' || typeof child === 'number' ? (\n          <Text key={'avatar-children-' + key} {..._text}>\n            {child}\n          </Text>\n        ) : (\n          child\n        )\n      );\n    }\n  });\n\n  const imageFitStyle: any = { height: '100%', width: '100%' };\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  const getSource = () => {\n    if (source) {\n      if (has(source, 'uri') && !isNil(source.uri)) {\n        return source;\n      } else if (!has(source, 'uri')) {\n        return source;\n      }\n    }\n    return null;\n  };\n  const imageSource = getSource();\n\n  return (\n    <Box {...resolvedProps}>\n      {imageSource && !error ? (\n        <Image\n          borderRadius={resolvedProps.borderRadius}\n          source={source}\n          alt={'--'}\n          _alt={_text}\n          style={[style, imageFitStyle]}\n          onError={() => {\n            setError(true);\n          }}\n          ref={ref}\n        />\n      ) : (\n        remainingChildren.length !== 0 && remainingChildren\n      )}\n      {Badge}\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Avatar));\n"]}